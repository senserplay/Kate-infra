name: Deploy to Prod

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version to deploy'
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      REGISTRY: cr.yandex/${{ secrets.REGISTRY_ID }}
      VERSION: ${{ github.event.inputs.version }}

    steps:
      - name: Verify image exists
        run: |
          echo "REGISTRY_ID: ${{ secrets.REGISTRY_ID }}"
          echo "REGISTRY: ${REGISTRY}"
          echo "VERSION: ${VERSION}"
          echo "Checking for image: ${REGISTRY}/app:${VERSION}_latest"
          if docker manifest inspect ${REGISTRY}/app:${VERSION}_latest; then
            echo "‚úÖ Image ${REGISTRY}/app:${VERSION}_latest found"
          else
            echo "‚ùå Image ${REGISTRY}/app:${VERSION}_latest not found"
            echo "Checking for alternative tags..."
            if docker manifest inspect ${REGISTRY}/app:${VERSION}; then
              echo "‚úÖ Found ${REGISTRY}/app:${VERSION}, will use this instead"
              echo "VERSION_TAG=${VERSION}" >> $GITHUB_ENV
            else
              echo "‚ùå No image found for version ${VERSION}"
              echo "Available images in registry:"
              # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—Ä–∞–∑–æ–≤
              echo "Please check if the image was built and pushed correctly"
              exit 1
            fi
          fi

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v0.1.4
        env:
          VERSION_TAG: ${{ env.VERSION_TAG }}
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script: |
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º VERSION_TAG –µ—Å–ª–∏ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏–Ω–∞—á–µ VERSION_latest
            IMAGE_TAG="${VERSION_TAG:-${VERSION}_latest}"
            docker pull ${REGISTRY}/app:${IMAGE_TAG}
            docker stop app || true
            docker rm app   || true
            docker run -d --name app ${REGISTRY}/app:${IMAGE_TAG}

      - name: Comment on Release Issue
        uses: actions/github-script@v6
        env:
          VERSION: ${{ env.VERSION }}
        with:
          script: |
            // –Ω–∞–π–¥—ë–º issue ‚ÄúRelease <VERSION>‚Äù
            const list = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open'
            });
            let iss = list.data.find(i=>i.title===`Release ${process.env.VERSION}`);
            if (!iss) {
              // –°–æ–∑–¥–∞–µ–º issue, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
              iss = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Release ${process.env.VERSION}`,
                body: `**Release ${process.env.VERSION}**\n- Created automatically for deployment\n- Version: ${process.env.VERSION}`
              });
              iss = iss.data;
            }
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: iss.number,
              body: 'üöÄ Deployed to production\n' +
                '- Date: ' + new Date().toISOString().slice(0,10) + '\n' +
                '- By: @' + context.actor
            });
